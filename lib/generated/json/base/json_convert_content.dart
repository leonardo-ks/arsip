// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:arsip/data/model/document_type_model.dart';
import 'package:arsip/data/model/documents_model.dart';
import 'package:arsip/data/model/error_model.dart';
import 'package:arsip/data/model/folder_model.dart';
import 'package:arsip/data/model/login_model.dart';
import 'package:arsip/data/model/post_document_type_model.dart';
import 'package:arsip/data/model/upload_file_model.dart';
import 'package:arsip/data/model/user_model.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
	static final Map<String, JsonConvertFunction> _convertFuncMap = {
		(DocumentTypeModel).toString(): DocumentTypeModel.fromJson,
		(DocumentTypeDataModel).toString(): DocumentTypeDataModel.fromJson,
		(DocumentTypeDataAttributesModel).toString(): DocumentTypeDataAttributesModel.fromJson,
		(DocumentTypeDataAttributesUsersPermissionsUserModel).toString(): DocumentTypeDataAttributesUsersPermissionsUserModel.fromJson,
		(DocumentTypeDataAttributesUsersPermissionsUserDataModel).toString(): DocumentTypeDataAttributesUsersPermissionsUserDataModel.fromJson,
		(DocumentTypeDataAttributesUsersPermissionsUserDataAttributesModel).toString(): DocumentTypeDataAttributesUsersPermissionsUserDataAttributesModel.fromJson,
		(DocumentTypeDataAttributesDocumentsModel).toString(): DocumentTypeDataAttributesDocumentsModel.fromJson,
		(DocumentTypeDataAttributesDocumentsDataModel).toString(): DocumentTypeDataAttributesDocumentsDataModel.fromJson,
		(DocumentTypeDataAttributesDocumentsDataAttributesModel).toString(): DocumentTypeDataAttributesDocumentsDataAttributesModel.fromJson,
		(DocumentsModel).toString(): DocumentsModel.fromJson,
		(DocumentsDataModel).toString(): DocumentsDataModel.fromJson,
		(DocumentsDataAttributesModel).toString(): DocumentsDataAttributesModel.fromJson,
		(DocumentsDataAttributesAttachmentModel).toString(): DocumentsDataAttributesAttachmentModel.fromJson,
		(DocumentsDataAttributesAttachmentDataModel).toString(): DocumentsDataAttributesAttachmentDataModel.fromJson,
		(DocumentsDataAttributesAttachmentDataAttributesModel).toString(): DocumentsDataAttributesAttachmentDataAttributesModel.fromJson,
		(DocumentsDataAttributesAttachmentDataAttributesFormatsModel).toString(): DocumentsDataAttributesAttachmentDataAttributesFormatsModel.fromJson,
		(DocumentsDataAttributesAttachmentDataAttributesFormatsThumbnailModel).toString(): DocumentsDataAttributesAttachmentDataAttributesFormatsThumbnailModel.fromJson,
		(DocumentsDataAttributesUsersPermissionsUserModel).toString(): DocumentsDataAttributesUsersPermissionsUserModel.fromJson,
		(DocumentsDataAttributesUsersPermissionsUserDataModel).toString(): DocumentsDataAttributesUsersPermissionsUserDataModel.fromJson,
		(DocumentsDataAttributesUsersPermissionsUserDataAttributesModel).toString(): DocumentsDataAttributesUsersPermissionsUserDataAttributesModel.fromJson,
		(DocumentsDataAttributesDocumentTypeModel).toString(): DocumentsDataAttributesDocumentTypeModel.fromJson,
		(DocumentsDataAttributesDocumentTypeDataModel).toString(): DocumentsDataAttributesDocumentTypeDataModel.fromJson,
		(DocumentsDataAttributesDocumentTypeDataAttributesModel).toString(): DocumentsDataAttributesDocumentTypeDataAttributesModel.fromJson,
		(ErrorModel).toString(): ErrorModel.fromJson,
		(ErrorDataModel).toString(): ErrorDataModel.fromJson,
		(FolderModel).toString(): FolderModel.fromJson,
		(FolderDataModel).toString(): FolderDataModel.fromJson,
		(FolderDataAttributesModel).toString(): FolderDataAttributesModel.fromJson,
		(FolderDataAttributesDocumentsModel).toString(): FolderDataAttributesDocumentsModel.fromJson,
		(FolderDataAttributesDocumentsDataModel).toString(): FolderDataAttributesDocumentsDataModel.fromJson,
		(FolderDataAttributesDocumentsDataAttributesModel).toString(): FolderDataAttributesDocumentsDataAttributesModel.fromJson,
		(LoginModel).toString(): LoginModel.fromJson,
		(PostDocumentTypeModel).toString(): PostDocumentTypeModel.fromJson,
		(PostDocumentTypeDataModel).toString(): PostDocumentTypeDataModel.fromJson,
		(PostDocumentTypeDataAttributesModel).toString(): PostDocumentTypeDataAttributesModel.fromJson,
		(UploadFileModel).toString(): UploadFileModel.fromJson,
		(UploadFileFormatsModel).toString(): UploadFileFormatsModel.fromJson,
		(UploadFileFormatsSmallModel).toString(): UploadFileFormatsSmallModel.fromJson,
		(UploadFileFormatsThumbnailModel).toString(): UploadFileFormatsThumbnailModel.fromJson,
		(UserModel).toString(): UserModel.fromJson,
	};

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<DocumentTypeModel>[] is M){
			return data.map<DocumentTypeModel>((Map<String, dynamic> e) => DocumentTypeModel.fromJson(e)).toList() as M;
		}
		if(<DocumentTypeDataModel>[] is M){
			return data.map<DocumentTypeDataModel>((Map<String, dynamic> e) => DocumentTypeDataModel.fromJson(e)).toList() as M;
		}
		if(<DocumentTypeDataAttributesModel>[] is M){
			return data.map<DocumentTypeDataAttributesModel>((Map<String, dynamic> e) => DocumentTypeDataAttributesModel.fromJson(e)).toList() as M;
		}
		if(<DocumentTypeDataAttributesUsersPermissionsUserModel>[] is M){
			return data.map<DocumentTypeDataAttributesUsersPermissionsUserModel>((Map<String, dynamic> e) => DocumentTypeDataAttributesUsersPermissionsUserModel.fromJson(e)).toList() as M;
		}
		if(<DocumentTypeDataAttributesUsersPermissionsUserDataModel>[] is M){
			return data.map<DocumentTypeDataAttributesUsersPermissionsUserDataModel>((Map<String, dynamic> e) => DocumentTypeDataAttributesUsersPermissionsUserDataModel.fromJson(e)).toList() as M;
		}
		if(<DocumentTypeDataAttributesUsersPermissionsUserDataAttributesModel>[] is M){
			return data.map<DocumentTypeDataAttributesUsersPermissionsUserDataAttributesModel>((Map<String, dynamic> e) => DocumentTypeDataAttributesUsersPermissionsUserDataAttributesModel.fromJson(e)).toList() as M;
		}
		if(<DocumentTypeDataAttributesDocumentsModel>[] is M){
			return data.map<DocumentTypeDataAttributesDocumentsModel>((Map<String, dynamic> e) => DocumentTypeDataAttributesDocumentsModel.fromJson(e)).toList() as M;
		}
		if(<DocumentTypeDataAttributesDocumentsDataModel>[] is M){
			return data.map<DocumentTypeDataAttributesDocumentsDataModel>((Map<String, dynamic> e) => DocumentTypeDataAttributesDocumentsDataModel.fromJson(e)).toList() as M;
		}
		if(<DocumentTypeDataAttributesDocumentsDataAttributesModel>[] is M){
			return data.map<DocumentTypeDataAttributesDocumentsDataAttributesModel>((Map<String, dynamic> e) => DocumentTypeDataAttributesDocumentsDataAttributesModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsModel>[] is M){
			return data.map<DocumentsModel>((Map<String, dynamic> e) => DocumentsModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataModel>[] is M){
			return data.map<DocumentsDataModel>((Map<String, dynamic> e) => DocumentsDataModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesModel>[] is M){
			return data.map<DocumentsDataAttributesModel>((Map<String, dynamic> e) => DocumentsDataAttributesModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesAttachmentModel>[] is M){
			return data.map<DocumentsDataAttributesAttachmentModel>((Map<String, dynamic> e) => DocumentsDataAttributesAttachmentModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesAttachmentDataModel>[] is M){
			return data.map<DocumentsDataAttributesAttachmentDataModel>((Map<String, dynamic> e) => DocumentsDataAttributesAttachmentDataModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesAttachmentDataAttributesModel>[] is M){
			return data.map<DocumentsDataAttributesAttachmentDataAttributesModel>((Map<String, dynamic> e) => DocumentsDataAttributesAttachmentDataAttributesModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesAttachmentDataAttributesFormatsModel>[] is M){
			return data.map<DocumentsDataAttributesAttachmentDataAttributesFormatsModel>((Map<String, dynamic> e) => DocumentsDataAttributesAttachmentDataAttributesFormatsModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesAttachmentDataAttributesFormatsThumbnailModel>[] is M){
			return data.map<DocumentsDataAttributesAttachmentDataAttributesFormatsThumbnailModel>((Map<String, dynamic> e) => DocumentsDataAttributesAttachmentDataAttributesFormatsThumbnailModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesUsersPermissionsUserModel>[] is M){
			return data.map<DocumentsDataAttributesUsersPermissionsUserModel>((Map<String, dynamic> e) => DocumentsDataAttributesUsersPermissionsUserModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesUsersPermissionsUserDataModel>[] is M){
			return data.map<DocumentsDataAttributesUsersPermissionsUserDataModel>((Map<String, dynamic> e) => DocumentsDataAttributesUsersPermissionsUserDataModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesUsersPermissionsUserDataAttributesModel>[] is M){
			return data.map<DocumentsDataAttributesUsersPermissionsUserDataAttributesModel>((Map<String, dynamic> e) => DocumentsDataAttributesUsersPermissionsUserDataAttributesModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesDocumentTypeModel>[] is M){
			return data.map<DocumentsDataAttributesDocumentTypeModel>((Map<String, dynamic> e) => DocumentsDataAttributesDocumentTypeModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesDocumentTypeDataModel>[] is M){
			return data.map<DocumentsDataAttributesDocumentTypeDataModel>((Map<String, dynamic> e) => DocumentsDataAttributesDocumentTypeDataModel.fromJson(e)).toList() as M;
		}
		if(<DocumentsDataAttributesDocumentTypeDataAttributesModel>[] is M){
			return data.map<DocumentsDataAttributesDocumentTypeDataAttributesModel>((Map<String, dynamic> e) => DocumentsDataAttributesDocumentTypeDataAttributesModel.fromJson(e)).toList() as M;
		}
		if(<ErrorModel>[] is M){
			return data.map<ErrorModel>((Map<String, dynamic> e) => ErrorModel.fromJson(e)).toList() as M;
		}
		if(<ErrorDataModel>[] is M){
			return data.map<ErrorDataModel>((Map<String, dynamic> e) => ErrorDataModel.fromJson(e)).toList() as M;
		}
		if(<FolderModel>[] is M){
			return data.map<FolderModel>((Map<String, dynamic> e) => FolderModel.fromJson(e)).toList() as M;
		}
		if(<FolderDataModel>[] is M){
			return data.map<FolderDataModel>((Map<String, dynamic> e) => FolderDataModel.fromJson(e)).toList() as M;
		}
		if(<FolderDataAttributesModel>[] is M){
			return data.map<FolderDataAttributesModel>((Map<String, dynamic> e) => FolderDataAttributesModel.fromJson(e)).toList() as M;
		}
		if(<FolderDataAttributesDocumentsModel>[] is M){
			return data.map<FolderDataAttributesDocumentsModel>((Map<String, dynamic> e) => FolderDataAttributesDocumentsModel.fromJson(e)).toList() as M;
		}
		if(<FolderDataAttributesDocumentsDataModel>[] is M){
			return data.map<FolderDataAttributesDocumentsDataModel>((Map<String, dynamic> e) => FolderDataAttributesDocumentsDataModel.fromJson(e)).toList() as M;
		}
		if(<FolderDataAttributesDocumentsDataAttributesModel>[] is M){
			return data.map<FolderDataAttributesDocumentsDataAttributesModel>((Map<String, dynamic> e) => FolderDataAttributesDocumentsDataAttributesModel.fromJson(e)).toList() as M;
		}
		if(<LoginModel>[] is M){
			return data.map<LoginModel>((Map<String, dynamic> e) => LoginModel.fromJson(e)).toList() as M;
		}
		if(<PostDocumentTypeModel>[] is M){
			return data.map<PostDocumentTypeModel>((Map<String, dynamic> e) => PostDocumentTypeModel.fromJson(e)).toList() as M;
		}
		if(<PostDocumentTypeDataModel>[] is M){
			return data.map<PostDocumentTypeDataModel>((Map<String, dynamic> e) => PostDocumentTypeDataModel.fromJson(e)).toList() as M;
		}
		if(<PostDocumentTypeDataAttributesModel>[] is M){
			return data.map<PostDocumentTypeDataAttributesModel>((Map<String, dynamic> e) => PostDocumentTypeDataAttributesModel.fromJson(e)).toList() as M;
		}
		if(<UploadFileModel>[] is M){
			return data.map<UploadFileModel>((Map<String, dynamic> e) => UploadFileModel.fromJson(e)).toList() as M;
		}
		if(<UploadFileFormatsModel>[] is M){
			return data.map<UploadFileFormatsModel>((Map<String, dynamic> e) => UploadFileFormatsModel.fromJson(e)).toList() as M;
		}
		if(<UploadFileFormatsSmallModel>[] is M){
			return data.map<UploadFileFormatsSmallModel>((Map<String, dynamic> e) => UploadFileFormatsSmallModel.fromJson(e)).toList() as M;
		}
		if(<UploadFileFormatsThumbnailModel>[] is M){
			return data.map<UploadFileFormatsThumbnailModel>((Map<String, dynamic> e) => UploadFileFormatsThumbnailModel.fromJson(e)).toList() as M;
		}
		if(<UserModel>[] is M){
			return data.map<UserModel>((Map<String, dynamic> e) => UserModel.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.asT<M>(json);
		}
	}
}